diff --git a/init.lua b/init.lua
index 4eae8e7..5f93e16 100644
--- a/init.lua
+++ b/init.lua
@@ -102,7 +102,11 @@ vim.g.have_nerd_font = false
 vim.opt.number = true
 -- You can also add relative line numbers, to help with jumping.
 --  Experiment for yourself to see if you like it!
--- vim.opt.relativenumber = true
+vim.opt.relativenumber = true
+
+vim.opt.expandtab = false
+vim.opt.tabstop = 4
+vim.opt.shiftwidth = 4
 
 -- Enable mouse mode, can be useful for resizing splits for example!
 vim.opt.mouse = 'a'
@@ -189,6 +193,18 @@ vim.keymap.set('n', '<C-l>', '<C-w><C-l>', { desc = 'Move focus to the right win
 vim.keymap.set('n', '<C-j>', '<C-w><C-j>', { desc = 'Move focus to the lower window' })
 vim.keymap.set('n', '<C-k>', '<C-w><C-k>', { desc = 'Move focus to the upper window' })
 
+-- Move withing wrapped lines
+vim.keymap.set('n', 'j', 'gj')
+vim.keymap.set('n', 'k', 'gk')
+vim.keymap.set('n', '<down>', 'gj')
+vim.keymap.set('n', '<up>', 'gk')
+vim.keymap.set('v', 'j', 'gj')
+vim.keymap.set('v', 'k', 'gk')
+vim.keymap.set('v', '<down>', 'gj')
+vim.keymap.set('v', '<up>', 'gk')
+vim.keymap.set('i', '<down>', '<C-o>gj')
+vim.keymap.set('i', '<up>', '<C-o>gk')
+
 -- [[ Basic Autocommands ]]
 --  See `:help lua-guide-autocommands`
 
@@ -230,6 +246,26 @@ require('lazy').setup({
   -- NOTE: Plugins can be added with a link (or for a github repo: 'owner/repo' link).
   'tpope/vim-sleuth', -- Detect tabstop and shiftwidth automatically
 
+  'mbbill/undotree', -- leader F5 for toggle
+
+  --[[
+  {
+    'vim-syntastic/syntastic',
+    config = function()
+      vim.opt.statusline = vim.opt.statusline + '%#warningmsg#'
+      --vim.opt.statusline = vim.opt.statusline + '%{SyntasticStatuslineFlag()}'
+      --vim.opt.statusline = vim.opt.statusline + '%*'
+      vim.g.syntastic_c_checkers = { 'clang_check' }
+      vim.g.syntastic_cpp_checkers = { 'clang_check' }
+      vim.g.syntastic_always_populate_loc_list = 1
+      vim.g.syntastic_auto_loc_list = 1
+      vim.g.syntastic_check_on_open = 1
+      vim.g.syntastic_check_on_wq = 0
+    end,
+  },
+  ]]
+  --
+
   -- NOTE: Plugins can also be added by using a table,
   -- with the first argument being the link and the following
   -- keys can be used to configure plugin behavior/loading/etc.
@@ -255,6 +291,54 @@ require('lazy').setup({
     },
   },
 
+  {
+    'lervag/vimtex',
+    lazy = false, -- we don't want to lazy load VimTeX
+    -- tag = "v2.15", -- uncomment to pin to a specific release
+    init = function()
+      -- VimTeX configuration goes here, e.g.
+      vim.g.vimtex_view_method = 'zathura'
+    end,
+  },
+
+  {
+    'folke/trouble.nvim',
+    opts = {}, -- for default options, refer to the configuration section for custom setup.
+    cmd = 'Trouble',
+    keys = {
+      {
+        '<leader>xx',
+        '<cmd>Trouble diagnostics toggle<cr>',
+        desc = 'Diagnostics (Trouble)',
+      },
+      {
+        '<leader>xX',
+        '<cmd>Trouble diagnostics toggle filter.buf=0<cr>',
+        desc = 'Buffer Diagnostics (Trouble)',
+      },
+      {
+        '<leader>cs',
+        '<cmd>Trouble symbols toggle focus=false<cr>',
+        desc = 'Symbols (Trouble)',
+      },
+      {
+        '<leader>cl',
+        '<cmd>Trouble lsp toggle focus=false win.position=right<cr>',
+        desc = 'LSP Definitions / references / ... (Trouble)',
+      },
+      {
+        '<leader>xL',
+        '<cmd>Trouble loclist toggle<cr>',
+        desc = 'Location List (Trouble)',
+      },
+      {
+        '<leader>xQ',
+        '<cmd>Trouble qflist toggle<cr>',
+        desc = 'Quickfix List (Trouble)',
+      },
+    },
+  },
+
   -- NOTE: Plugins can also be configured to run Lua code when they are loaded.
   --
   -- This is often very useful to both group configuration, as well as handle
@@ -396,6 +480,8 @@ require('lazy').setup({
         },
       }
 
+      vim.keymap.set('n', '<leader><F5>', vim.cmd.UndotreeToggle)
+
       -- Enable Telescope extensions if they are installed
       pcall(require('telescope').load_extension, 'fzf')
       pcall(require('telescope').load_extension, 'ui-select')
@@ -837,7 +923,20 @@ require('lazy').setup({
       }
     end,
   },
-
+  --{
+  --'morhetz/gruvbox',
+  --priority = 1000,
+  --init = function()
+  --vim.cmd.colorscheme 'gruvbox'
+  --end,
+  --},
+  {
+    'ellisonleao/gruvbox.nvim',
+    priority = 1000,
+    config = true,
+    opts = { transparent_mode = true },
+    --vim.cmd.colorscheme 'gruvbox',
+  },
   { -- You can easily change to a different colorscheme.
     -- Change the name of the colorscheme plugin below, and then
     -- change the command in the config to whatever the name of that colorscheme is.
@@ -845,12 +944,14 @@ require('lazy').setup({
     -- If you want to see what colorschemes are already installed, you can use `:Telescope colorscheme`.
     'folke/tokyonight.nvim',
     priority = 1000, -- Make sure to load this before all the other start plugins.
+    opts = { transparent = true },
     init = function()
       -- Load the colorscheme here.
       -- Like many other themes, this one has different styles, and you could load
       -- any other, such as 'tokyonight-storm', 'tokyonight-moon', or 'tokyonight-day'.
-      vim.cmd.colorscheme 'tokyonight-night'
-
+      --vim.cmd.colorscheme 'tokyonight-night'
+      -- This can be used to change cursorline color but transparency doesn't seem to work.
+      -- vim.api.nvim_set_hl(0, 'cursorline', { bg = '#0f0f0f' })
       -- You can configure highlights by doing something like:
       vim.cmd.hi 'Comment gui=none'
     end,
@@ -970,5 +1071,7 @@ require('lazy').setup({
   },
 })
 
+vim.cmd [[colorscheme gruvbox]]
+
 -- The line beneath this is called `modeline`. See `:help modeline`
 -- vim: ts=2 sts=2 sw=2 et

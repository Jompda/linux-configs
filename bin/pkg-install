#!/bin/bash
#
# Usage: ./pkg_install [cmd] # POSITIONAL ARGUMENT last fallback
#                      [--package <pkg>] # first fallback
#                      [--aur <pkg>] # Currently prioritized over specific package
#                               # managers but behaviour should be reversed.
#                      # package manager -specific packages
#                      [--pacman <pkg>]
#                      [--apt-get <pkg>]
# If the command is specified and exists the script exits.
# Script tries to install the package using the first found package manager.
# The package name is either the <pkg> specified for the found package manager
# or, as fallbacks, package value and then command value.
#
# Author Joni Rapo 9.2.2025

set -e

DEBUG=false

COMMAND=
PACKAGE=
AUR=
PACMAN=
APT_GET=

# Parsing arguments src: https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
LONGOPTS="debug,package:,aur:,pacman:,apt-get:"

PARSED=$(getopt --options='' --longoptions=$LONGOPTS --name "$0" -- "$@") || exit 1
eval set -- "$PARSED"

while true; do
  case "$1" in
    --debug)
      DEBUG=true
      shift
      ;;
    --package)
      PACKAGE="$2"
      shift 2
      ;;
    --aur)
      AUR="$2"
      shift 2
      ;;
    --pacman)
      PACMAN="$2"
      shift 2
      ;;
    --apt-get)
      APT_GET="$2"
      shift 2
      ;;
    --)
      shift
      break # -- signals end of optional arguments
      ;;
    *)
      echo "wow, something went wrong"
      exit 1
      ;;
  esac
done

COMMAND=$1
shift

if [[ -z $PACKAGE ]]; then
  PACKAGE="$COMMAND"
  if $DEBUG; then
    echo "Assigned COMMAND value to PACKAGE."
  fi
fi

# debug
if $DEBUG; then
  echo "COMMAND=$COMMAND"
  echo "PACKAGE=$PACKAGE"
  echo "AUR:$AUR"
  echo "PACMAN:$PACMAN"
  echo "APT_GET:$APT_GET"
  echo "LEFTOVER_ARGS:$@"
fi

if [[ ! -z $COMMAND ]] && command -v $COMMAND 2>&1 >/dev/null; then
  echo "Command $COMMAND exists, skipping installation.."
  exit 0
fi

if [[ ! -z $AUR ]]; then
  # AUR
  if command -v yay 2>&1 >/dev/null; then
    yay -S "${AUR:-$PACKAGE}"
  # TODO: Support other AUR package managers.
  fi
elif command -v pacman 2>&1 >/dev/null; then
  sudo pacman -Sy --needed "${PACMAN:-$PACKAGE}"
elif command -v apt-get 2>&1 >/dev/null; then
  sudo apt-get -Sy "${APT_GET:-$PACKAGE}"
else
  echo "Package manager not supported or not found and installing from source is not yet supported."
  exit 1
fi


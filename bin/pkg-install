#!/bin/bash
#
# Usage: ./pkg_install [cmd] # ONLY POSITIONAL ARGUMENT last fallback
#                      [--package <pkg>] # first fallback
#                      [--exists <file/dir>] # if exists skip installation
#                      [--conflicts <pkg1,pkg2,..>] # comma-separated list of conflicting packages
#                      [--aur <pkg>] # desired AUR package
#                      # package manager -specific packages
#                      [--pacman <pkg>]
#                      [--apt-get <pkg>]
# If the command is specified and exists the script exits.
# The script tries to install the package using the first found package manager.
# AUR is used as a last resort. The package name is either the <pkg> specified
# for the found package manager or, as fallbacks, package value and then command value.
#
# Author Joni Rapo 14.2.2025

# NOTE: there's something called pacapt that acts as a pacman-like wrapper for other package managers
# TODO: Update this to use that one
# TODO: Faster check for python packages

set -e

DEBUG=false
INSTALLED=false

COMMAND=
PACKAGE=
EXISTS=
CONFLICTS=()
AUR=
PACMAN=
APT_GET=

# Parsing arguments src: https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
LONGOPTS="debug,package:,exists:,conflicts:,aur:,pacman:,apt-get:"

PARSED=$(getopt --options='' --longoptions=$LONGOPTS --name "$0" -- "$@") || exit 1
eval set -- "$PARSED"

while true; do
  case "$1" in
    --debug) DEBUG=true; shift ;;
    --package) PACKAGE="$2"; shift 2 ;;
    --exists) EXISTS="$2"; shift 2 ;;
    --conflicts)
      IFS=","
      read -ra CONFLICTS <<< "$2"
      shift 2 ;;
    --aur) AUR="$2"; shift 2 ;;
    --pacman) PACMAN="$2"; shift 2 ;;
    --apt-get) APT_GET="$2"; shift 2 ;;
    # -- signals end of optional arguments
    --) shift; break ;;
    *) echo "wow, something went wrong"; exit 1 ;;
  esac
done

COMMAND=$1
shift || true


if [[ -z $PACKAGE ]]; then
  PACKAGE="$COMMAND"
  if [[ -z $PACKAGE ]]; then
    echo "Neither package or command was specified."
    exit 1
  fi
fi

# debug
if $DEBUG; then
  echo "COMMAND=$COMMAND"
  echo "PACKAGE=$PACKAGE"
  echo "CONFLICTS=${CONFLICTS[@]}"
  echo "AUR:$AUR"
  echo "PACMAN:$PACMAN"
  echo "APT_GET:$APT_GET"
  echo "LEFTOVER_ARGS:$@"
fi

if [[ ! -z $COMMAND ]] && command -v $COMMAND 2>&1 >/dev/null; then
  echo "Command $COMMAND exists, skipping installation.."
  exit 0
fi
if [[ ! -z $EXISTS ]] && [[ -e $EXISTS ]]; then
  echo "$EXISTS exists in the filesystem, skipping installation.." 
  exit 0
fi

for pkg in "${CONFLICTS[@]}"; do
  if command -v $pkg 2>&1 >/dev/null ; then
    echo "Found conflicting package $pkg. Skipping installation.."
    exit 0
  fi
done


if command -v yay 2>&1 >/dev/null; then
  PKG="${AUR:-$PACKAGE}"
  if yay -Q "$PKG" 2>&1 >/dev/null; then
    echo "Package $PKG already exists. Skipping installation.."
    exit 0
  fi
  yay -S --needed "$PKG"
  # TODO: Support other AUR package managers.
elif command -v pacman 2>&1 >/dev/null; then
  PKG="${PACMAN:-$PACKAGE}"
  if pacman -Q "$PKG" 2>&1 >/dev/null; then
    echo "Package $PKG already exists. Skipping installation.."
    exit 0
  fi
  if sudo pacman -Sy --needed "$PKG"; then
    INSTALLED=true
  fi
elif command -v apt-get 2>&1 >/dev/null; then
  # TODO: chek if pkg exists using apt-get or use pacapt or similar tool
  if sudo apt-get install "${APT_GET:-$PACKAGE}"; then
    INSTALLED=true
  fi
fi

